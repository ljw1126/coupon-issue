plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.3'
    id 'io.spring.dependency-management' version '1.1.6'
    id 'jacoco'
    id "org.sonarqube" version "5.0.0.4638"
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

repositories {
    mavenCentral()
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'jacoco'

    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(17)
        }
    }

    repositories {
        mavenCentral()
    }

    dependencyManagement {
        imports {
            mavenBom 'org.springframework.cloud:spring-cloud-dependencies:2023.0.1'
        }
    }

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
        implementation 'org.springframework.boot:spring-boot-starter-data-redis'
        implementation 'org.springframework.boot:spring-boot-starter'
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'

        runtimeOnly 'com.h2database:h2'
        runtimeOnly 'com.mysql:mysql-connector-j'

        implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
        annotationProcessor 'com.querydsl:querydsl-apt:5.0.0:jakarta'
        annotationProcessor 'jakarta.annotation:jakarta.annotation-api'
        annotationProcessor 'jakarta.persistence:jakarta.persistence-api'

        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'io.micrometer:micrometer-registry-prometheus'

        // test container
        testImplementation(platform('org.testcontainers:testcontainers-bom:1.17.5'))
        testImplementation 'org.testcontainers:testcontainers'
        testImplementation 'org.testcontainers:junit-jupiter'
        testImplementation 'org.testcontainers:mysql'
        testImplementation 'org.testcontainers:kafka'

        // kafka
        implementation 'org.springframework.cloud:spring-cloud-stream'
        implementation 'org.springframework.cloud:spring-cloud-stream-binder-kafka'
        testImplementation 'org.springframework.kafka:spring-kafka-test'
    }

    tasks.test {
        finalizedBy jacocoTestReport
    }

    tasks.jacocoTestReport {
        dependsOn test
        reports {
            xml.required.set(true)
            html.required.set(true)
        }

        afterEvaluate {
            getClassDirectories().setFrom(classDirectories.files.collect {
                fileTree(dir: it, exclude: ["**/dto/**", "**/configuration/**", "**/exception/**"])
            })
        }
    }

    jacoco {
        toolVersion = "0.8.8"
    }

    tasks.test {
        useJUnitPlatform()
    }

    bootJar.enabled = false
    jar.enabled = false
}

bootJar.enabled = false
jar.enabled = false

sonar {
    properties {
        property("sonar.organization", "leejinwoo1126")
        property("sonar.host.url", "https://sonarcloud.io")
        property("sonar.projectKey", "ljw1126_coupon-issue")
        property("sonar.projectName", "coupon-issue")
        property("sonar.sources", "src/main/java")
        property("sonar.tests", "src/test/java")
        property("sonar.coverage.jacoco.xmlReportPaths", "${rootProject.projectDir}/code-coverage-report/build/reports/jacoco/testCodeCoverageReport/testCodeCoverageReport.xml")
        property("sonar.junit.reportPaths", "build/test-results/test")
    }
}

tasks.register("codeCoverageReport") {
    dependsOn ":code-coverage-report:testCodeCoverageReport"
    doLast {
        println "Code coverage report executed from code-coverage-report module."
    }
}